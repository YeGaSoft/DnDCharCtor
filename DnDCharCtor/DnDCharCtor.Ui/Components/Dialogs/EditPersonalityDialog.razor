@implements IDialogContentComponent<PersonalityViewModel>

<FluentDialog ShowDismiss="true" OnDismiss="CloseDialog">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
    <FluentDialogBody>
        <EditForm EditContext="@_editContext">
            <DataAnnotationsValidator />

            <FluentTextField @bind-Value="Content.CharacterName" Label="Character Name" Required="true" />
            <FluentTextField @bind-Value="Content.ClassName" Label="Class Name" Required="true" />
            <FluentTextField @bind-Value="Content.Level" Label="Level" Required="true" Type="number" />
            <FluentTextField @bind-Value="Content.Background" Label="Background" />
            <FluentTextField @bind-Value="Content.PlayerName" Label="Player Name" Required="true" />
            <FluentTextField @bind-Value="Content.Race" Label="Race" Required="true" />
            <FluentTextField @bind-Value="Content.Attitute" Label="Attitude" />
            <FluentTextField @bind-Value="Content.Experience" Label="Experience" Required="true" Type="number" />

            <div style="color: var(--error);">
                <FluentValidationSummary />
            </div>
        </EditForm>
    </FluentDialogBody>
    <FluentDialogFooter>
        <FluentButton OnClick="CloseDialogAsync">Submit</FluentButton>
    </FluentDialogFooter>
</FluentDialog>


@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public PersonalityViewModel Content { get; set; } = default!;

    private EditContext _editContext = default!;

    private async Task CloseDialogAsync()
    {
        await Dialog.CloseAsync(Content);
    }
}
