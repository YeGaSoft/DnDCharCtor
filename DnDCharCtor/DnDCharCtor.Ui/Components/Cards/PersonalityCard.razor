@inject IDialogService DialogService

<FluentCard>
    <FluentHeader>
        <h2>@PersonalityViewModel.CharacterName</h2>
    </FluentHeader>
    <FluentBodyContent>
        <div>
            <strong>Class:</strong> @PersonalityViewModel.ClassName <br />
            <strong>Level:</strong> @PersonalityViewModel.Level <br />
            <strong>Background:</strong> @PersonalityViewModel.Background <br />
            <strong>Player Name:</strong> @PersonalityViewModel.PlayerName <br />
            <strong>Race:</strong> @PersonalityViewModel.Race <br />
            <strong>Attitude:</strong> @PersonalityViewModel.Attitute <br />
            <strong>Experience:</strong> @PersonalityViewModel.Experience <br />
        </div>
    </FluentBodyContent>
    <FluentFooter>
        <FluentButton OnClick="EditPersonalityViewModel">Edit</FluentButton>
    </FluentFooter>
</FluentCard>

@code {
    [Parameter]
    [EditorRequired]
    public PersonalityViewModel PersonalityViewModel { get; set; } = default!;

    private DialogParameters _dialogParameters = new ()
    {
        Title = $"Edit Personality",
        //Width = "500px",
        PreventDismissOnOverlayClick = true,
        PreventScroll = true,
    };


    private async void EditPersonalityViewModel()
    {
        var data = new PersonalityViewModel(PersonalityViewModel);

        var dialog = await DialogService.ShowDialogAsync<EditPersonalityDialog>(PersonalityViewModel, _dialogParameters);
        var result = await dialog.Result;
        if (result.Cancelled is false && result.Data is not null)
        {
            PersonalityViewModel = (PersonalityViewModel)result.Data;
            StateHasChanged();
        }
    }
}
